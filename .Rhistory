# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
summary(profiles)
#libraries
library(dplyr)
library(ggplot2)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
#libraries
library(dplyr)
library(ggplot2)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
summary(as.factor(profiles$gender))
summary(as.factor(profiles$gender))
as.factor(profiles$gender)
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
summary(ratings)
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print("Existem " + length(movies$movieid) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " + as.char(length(movies$movieid)) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " + as.character(length(movies$movieid)) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " ++ as.character(length(movies$movieid)) ++ "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem ",length(movies$movieid),"filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print(paste("Existem ",length(movies$movieid),"filmes no dataset",sep=" "))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print(paste("Existem ",length(movies$movieid),"filmes no dataset",sep=" "))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
print(paste("Existem ",
length(movies$movieid),
"filmes no dataset",
sep=" "))
print(paste("Existem",
length(unique(ratings$movieid)),
"filmes com classifição",
sep=" "))
print(paste("Portanto podemos retirar",
length(movies$movieid) - length(unique(ratings$movieid)),
sep=" "))
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
print(paste("Existem ",
length(movies$movieid),
"filmes no dataset",
sep=" "))
print(paste("Existem",
length(unique(ratings$movieid)),
"filmes com classifição",
sep=" "))
print(paste("Portanto podemos retirar",
length(movies$movieid) - length(unique(ratings$movieid)),
sep=" "))
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
length(ratings)
length(ratings$rating)
length(unique(ratings['userid','rating']))
length(unique(ratings['userid','movieid']))
ratings['userid','movieid']
ratings
c('movie_id', user_id)
ratings[c('movie_id', 'user_id')]
ratings[c(movie_id, user_id)]
ratings[c(ratings$movie_id, ratings$user_id)]
length(ratings %>%
select(userid, movieid) %>%
t %>% c %>% unique)
length(ratings$rating)
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(user, movieid) %>%
+   t %>% c %>% unique
ratings %>%
select(user, movieid) %>%
t %>% c %>% unique
ratings %>%
select(user, movieid) %>%
t %>% c %>% unique
ratings %>%
select(userid, movieid) %>%
t %>% c %>% unique
ratings %>%
select(userid, movieid) %>% unique
length(ratings %>%
select(userid, movieid) %>% unique)
getwd()
setwd("DMII_project/")
# Chunk 1: 1
#libraries
library(dplyr)
library(ggplot2)
library(gridExtra)
library(recommenderlab)
# Chunk 2: 2
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
#ratings <- read.csv('data/ratings.csv')
ratings <- ratings2
# Chunk 3: 3
profiles$gender[profiles$gender == ""] <- "Unknown"
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
# Chunk 4: 4
profiles['agegroup'] <- profiles['age'] %>% mutate(age = as.integer(age/5)*5)
profiles$agegroup[is.na(profiles$agegroup) | profiles$agegroup > 70] <- 0
age_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores por faixa etária",
x="Sexo", y="Nº de Utilizadores")
gender_raw_plot = ggplot(profiles, aes(gender)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(gender))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
age_sex_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup)))  +
scale_y_continuous(labels=scales::percent) +
ylab("relative frequencies") + facet_grid(~gender)
# Chunk 5: 5
summary(ratings)
# Chunk 6: save_ratings
# Create data
ratings['rating'] = floor(ratings$rating)
ratings_raw_plot <- ggplot(ratings, aes(rating)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(rating)))  +
scale_y_continuous(labels=scales::percent) +
labs(
title="Figura 1: Classificações de filmes",
x="Rating",
y="Nº of ratings")
# Chunk 7: tacalado
# Preliminary Analisys
# print(paste("Existem ",
#             length(movies$movieid),
#             "filmes no dataset",
#             sep=" "))
#
# print(paste("Existem",
#             length(unique(ratings$movieid)),
#             "filmes com classifição",
#             sep=" "))
#
# print(paste("Portanto podemos retirar",
#             length(movies$movieid) - length(unique(ratings$movieid)),
#             sep=" "))
#
# relevant <- unique(ratings$movieid)
# movies <- filter(movies, movieid %in% relevant)
# Chunk 8: 6
ratings <- filter(ratings, rating >= 3)
positive <- ratings %>% count(movieid)
summary(positive)
positive <- filter(positive, n >= 50)
ratings <- filter(ratings, movieid %in% positive$movieid)
movies <- filter(movies, movieid %in% ratings$movieid)
ratings_pro_plot <- ggplot(ratings, aes(rating)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(rating)))  +
scale_y_continuous(labels=scales::percent) +
theme(legend.position="none") +
labs(
title="Figura 1: Ratings de filmes com mais de 50 ratings \"positivos\"",
x="Rating",
y="Nº of ratings")
# Chunk 9: 8
users_prof <- unique(profiles$userid)
c_users_prof <- length(users_prof)
# Number of total users
print(c_users_prof)
users_rat <- unique(ratings$userid)
c_users_rat <- length(users_rat)
# Number of users that have rated a movie
print(c_users_rat)
# Number of useless users
print(c_users_prof - c_users_rat)
profiles <- filter(profiles, userid %in% users_rat)
# Chunk 10: 9
gender_pro_plot = ggplot(profiles, aes(gender)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(gender)))  +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores que já classificaram um filme por género",
x="Sexo", y="Nº de Utilizadores")
grid.arrange(gender_raw_plot, gender_pro_plot, ncol=2)
# Chunk 11: 10
age_pro_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup)))  +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
grid.arrange(age_raw_plot, age_pro_plot, ncol=2)
# Chunk 12: 11
# Diferença de genero de quem votou
ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup)))  +
scale_y_continuous(labels=scales::percent) +
ylab("relative frequencies") + facet_grid(~gender)
# Chunk 13
bm <- as(ratings,"binaryRatingMatrix")
pop_model <- Recommender(bm, "POPULAR")
getmode(pop_model)
pop_model <- Recommender(bm, "POPULAR")
getmodel(pop_model)
pop_model <- Recommender(bm, "POPULAR")
getModel(pop_model)
pop_model
getList(getModel(pop_model)$topN)
getList(getModel(pop_model)$5)
getList(getModel(pop_model)$topN)[:5]
getList(getModel(pop_model)$topN)[1:5]
getList(getModel(pop_model)$topN)[1][1:5]
getList(getModel(pop_model)$topN)[1]
getList(getModel(pop_model)$topN)
getList(getModel(pop_model)$topN)[1]
getList(getModel(pop_model)$topN)[0]
getList(getModel(pop_model)$topN)[1]
getList(getModel(pop_model)$topN)[1][2]
getList(getModel(pop_model)$topN)[1][1]
getList(getModel(pop_model)$topN)[1][1][1]
getList(getModel(pop_model)$topN)[1][1][2]
View(ratings)
recs <- predict(pop_model, as(filter(ratings, userid==882359)"binaryRatingMatrix"))
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"))
recs <- predict(pop_model, as(filter(ratings, userid==882359, "binaryRatingMatrix")))
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"))
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"), n=2)
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"), n=2)
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"), n=2)
recs <- predict(pop_model, as(filter(ratings, userid==882359), "binaryRatingMatrix"), n=2)
test <- filter(ratings, userid==882359)
test
test_bm <- as(test, "binaryRatingMatrix")
recs <- predict(pop_model, teste_bm, n=2)
test_bm <- as(test, "binaryRatingMatrix")
test_bm
recs <- predict(pop_model, teste_bm, n=2)
image(test_bm)
bm
View(bm)
bm.data
bm.data.data
bm$data
bm$data$data
bm['data']
bm[data()]
bm->data()
attr(x,data)
attr(bm,data)
attr(bm,"data")
attr(attr(bm,"data"),"data")
attr(attr(attr(bm,"data"),"data"),i)
(attr(attr(bm,"data"),"data")[3]
)
(attr(attr(bm,"data"),"data"))[3]
(attr(attr(bm,"data"),"data"))[1]
(attr(attr(bm,"data"),"data"))[1,]
View(ratings)
(attr(attr(bm,"data"),"data"))
bm@data@data@i
bm@data@data@i
sort(bm@data@data@i)
sort(bm@data@data@p)
bm@data@data@p %>% sort()
bm@data@data@p %>% max()
bm@data@data@i %>% max()
bm@data@data[1,2]
sample(bm,2)
view(sample(bm,2))
View(sample(bm,2))
test <- table(ratings$userid, ratings$movieid)
head(tes)
head(test)
test
distance <- dist(test)
activeuser <- matrix(0, 1, ncol(length(ratings$movieid)), dimnames = list(user = "joe", page = pages))
activeuser <- matrix(0, 1, ncol(length(ratings$movieid)), dimnames = list(user = "joe", page = ratings$movieid))
activeuser <- matrix(0, 1, ncol(length(ratings$movieid)), dimnames = list(user = "joe", page = pages))
activeuser <- matrix(0, 1, ncol(length(ratings$movieid)))
activeuser <- matrix(0, 1, ncol(length(unique(ratings$movieid)))
)
activeuser <- matrix(0, 1, ncol(length(unique(ratings$movieid))))
activeuser <- matrix(0, 1, ncol(10))
activeuser <- matrix(0, 1, ncol(10))
activeuser <- matrix(0, 1, ncol(10))
activeuser <- matrix(0, 1, ncol=10)
activeuser
activeuser <- matrix(0, 1, ncol=length(unique(ratings$movieid)))
activeuser
activeuser[1, c(1,2)] <- 1
activeuser
activeuser[1, c(1,2)] <- 1
View(activeuser)
View(activeuser)
activeuser[1, [1,2]] <- 0
activeuser[1, c(1,2)] <- 0
user <- filter(ratings, userid == 11)$movieid
user
activeuser[1, user] <- 0
activeuser[1, c(user)] <- 0
bm@data@itemInfo
bm@normalize
bm@normalize()
bm@normalize
bm@data@data
bm@data@data
bm@data@data@p
bm@data@data@i
bm@data@data@p
View(bm)
bm@data@data@dim
bm@data@data@Dim
user
activeuser
activeuser <- as(1, c(user))
activeuser <- as(1, user)
user
c(1,2,3,4)
activeuser[1, user] <- 1
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(user='zé', page = unique(movies$movieid)))
activeuser
activeuser
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(user='zé', page = sort(unique(movies$movieid))))
activeuser
activeuser[1, user] <- 1
user
activeuser[1, c(4)] <- 1
dimnames(activeuser)
user <- as.character(user)
user
activeuser[1, c(4)] <- 1
activeuser[1, c(4)] <- 0
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(user='zé', page = sort(unique(movies$movieid))), items=sort(unique(movies$movieid)))
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(user='zé', page = sort(unique(movies$movieid))), items=paste(sort(unique(movies$movieid))))
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(user='zé'), items=paste(sort(unique(movies$movieid))))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(as.character(sort(unique(movies$movieid))),as.character(sort(unique(movies$movieid)))))
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(,
as.character(sort(unique(movies$movieid)))))
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(" ",
as.character(sort(unique(movies$movieid)))))
activeuser
activeuser[1, user] <- 1
user
predict(pop_model, activeuser, n=10)
aubm <- as(activeuser, 'binaryRatingMatrix')
predict(pop_model, aubm, n=10)
recs <- predict(pop_model, aubm, n=10)
getList(recs)
# busca das classificações do userid 11
user <- filter(ratings, userid == 11)$movieid
# converter para uma linha
activeuser <- matrix(0 , 1, ncol=length(unique(movies$movieid)),
dimnames = list(" ",
as.character(sort(unique(movies$movieid)))))
# mudar as classificaçoes para 1
activeuser[1, user] <- 1
# mudar para binary...
aubm <- as(activeuser, 'binaryRatingMatrix')
#prever
predict(pop_model, aubm, n=10)
#guardar
recs <- predict(pop_model, aubm, n=10)
#imprimir
getList(recs)

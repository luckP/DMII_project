# No entanto existem idades impróvaveis
# E agora, a tabela ratings
print(summary(ratings))
# Podemos ver que grande parte das classificações são "acima da média", isto é
# são positivas
#libraries
library(dplyr)
library(ggplot2)
print(summary(profiles))
# E agora, a tabela ratings
print(summary(ratings))
# Podemos ver que grande parte das classificações são "acima da média", isto é são positivas
#libraries
library(dplyr)
library(ggplot2)
summary(profiles)
#libraries
library(dplyr)
library(ggplot2)
summary(ratings)
#libraries
library(dplyr)
library(ggplot2)
profiles['agegroup'] <- profiles['age'] %>% mutate(age =
ifelse(is.na(age) , "Desconhecido",
ifelse(age >= 10 & age < 18, 'Adolescente',
ifelse(age >= 18 & age < 65, 'Adulto',
ifelse(age >= 65 & age <= 90, 'Idoso',
"Desconhecido")))))
age_raw <- data.frame(
name = c("Adolescente","Adulto", "Desconhecido", "Idoso"),
value = profiles['agegroup'] %>% count(agegroup))
age_raw_plot = ggplot(age_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#33cc33", "#3399ff","#4d4d4d", "#6600ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
summary(ratings)
summary(ratings)
#libraries
library(dplyr)
library(ggplot2)
#libraries
library(dplyr)
library(ggplot2)
#libraries
library(dplyr)
library(ggplot2)
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
#libraries
library(dplyr)
library(ggplot2)
#libraries
library(dplyr)
library(ggplot2)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
summary(profiles)
#libraries
library(dplyr)
library(ggplot2)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Create data
gender_raw <- data.frame(
name = c("Desconhecido","Feminino", "Masculino"),
value = profiles['gender'] %>% count(gender))
gender_raw_plot = ggplot(gender_raw, aes(x=name, y=value.n)) +
geom_bar(stat = "identity" ,
fill = c("#4d4d4d", "#ff1ac6", "#0066ff")) +
labs(title="Figura 2: Utilizadores por género",
x="Sexo", y="Nº de Utilizadores")
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
#libraries
library(dplyr)
library(ggplot2)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
summary(as.factor(profiles$gender))
summary(as.factor(profiles$gender))
as.factor(profiles$gender)
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
summary(ratings)
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print(length(movies$movieid))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print("Existem " + length(movies$movieid) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " + as.char(length(movies$movieid)) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " + as.character(length(movies$movieid)) + "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem " ++ as.character(length(movies$movieid)) ++ "filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print("Existem ",length(movies$movieid),"filmes no dataset")
# Preliminary Analisys
# How many movies exist?
print(paste("Existem ",length(movies$movieid),"filmes no dataset",sep=" "))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
# How many movies exist?
print(paste("Existem ",length(movies$movieid),"filmes no dataset",sep=" "))
# And how many have ratings?
print(length(unique(ratings$movieid)))
# So, we have that
print(length(movies$movieid) - length(unique(ratings$movieid)))
# movies that are not relevant in this study.
# Almost a third of the table!
# let's remove those
relevant <- unique(ratings$movieid)
#print(relevant)
#movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
print(paste("Existem ",
length(movies$movieid),
"filmes no dataset",
sep=" "))
print(paste("Existem",
length(unique(ratings$movieid)),
"filmes com classifição",
sep=" "))
print(paste("Portanto podemos retirar",
length(movies$movieid) - length(unique(ratings$movieid)),
sep=" "))
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
# Preliminary Analisys
print(paste("Existem ",
length(movies$movieid),
"filmes no dataset",
sep=" "))
print(paste("Existem",
length(unique(ratings$movieid)),
"filmes com classifição",
sep=" "))
print(paste("Portanto podemos retirar",
length(movies$movieid) - length(unique(ratings$movieid)),
sep=" "))
relevant <- unique(ratings$movieid)
movies <- movies[match(movies$movieid, relevant, nomatch=0),]
length(ratings)
length(ratings$rating)
length(unique(ratings['userid','rating']))
length(unique(ratings['userid','movieid']))
ratings['userid','movieid']
ratings
c('movie_id', user_id)
ratings[c('movie_id', 'user_id')]
ratings[c(movie_id, user_id)]
ratings[c(ratings$movie_id, ratings$user_id)]
length(ratings %>%
select(userid, movieid) %>%
t %>% c %>% unique)
length(ratings$rating)
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(userid, movieid) %>%
+   t %>% c %>% unique
ratings %>%
+   select(user, movieid) %>%
+   t %>% c %>% unique
ratings %>%
select(user, movieid) %>%
t %>% c %>% unique
ratings %>%
select(user, movieid) %>%
t %>% c %>% unique
ratings %>%
select(userid, movieid) %>%
t %>% c %>% unique
ratings %>%
select(userid, movieid) %>% unique
length(ratings %>%
select(userid, movieid) %>% unique)
setwd("DMII_project")
#libraries
library(dplyr)
library(ggplot2)
library(gridExtra)
library(recommenderlab)
library(scales)
library(caTools)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
ratings2 = ratings
#ratings <- ratings2
profiles$gender[profiles$gender == ""] <- "Unknown"
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
profiles['agegroup'] <- profiles['age'] %>% mutate(age = as.integer(age/5)*5)
profiles$agegroup[is.na(profiles$agegroup) | profiles$agegroup > 70] <- 0
age_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 1: Utilizadores por idade", x="Sexo", y="% de Utilizadores")
gender_raw_plot = ggplot(profiles, aes(gender)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(gender))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores por género",x="Sexo", y="% de Utilizadores")
age_sex_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup)))  +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 3: Idade dos utilizadores por género", x="Idade", y="% de Utilizadores") +
facet_grid(~gender)
num_ratings_by_users <- ratings %>% count(userid)
num_users_by_num_ratings <- num_ratings_by_users %>% count(n)
valid_users <- filter(num_ratings_by_users,n<200 & n>5)$userid
ratings <- filter(ratings, userid %in% valid_users)
#ratings <- filter(ratings, rating >= 3)
rm(valid_users,num_ratings_by_users,num_users_by_num_ratings)
users_prof <- unique(profiles$userid)
c_users_prof <- length(users_prof)
# Number of total users
print(c_users_prof)
users_rat <- unique(ratings$userid)
c_users_rat <- length(users_rat)
# Number of users that have rated a movie
print(c_users_rat)
# Number of useless users
print(c_users_prof - c_users_rat)
profiles <- filter(profiles, userid %in% users_rat)
rm(users_prof,c_users_prof,users_rat,c_users_rat)
ratings <- filter(ratings, userid %in% profiles$userid)
#set.seed(7)
#mask = sample.split(profiles$gender, SplitRatio=0.7)
#profiles_train = profiles[ mask,]
#profiles_test  = profiles[!mask,]
u_ratings_count <- ratings %>% count(userid)
u_ratings_count <- u_ratings_count %>% mutate(test = n>5 & n<=10)
users_train = filter(u_ratings_count, test==FALSE)$userid
users_test = filter(u_ratings_count, test==TRUE)$userid
#rm(mask)
valid_movies <- ratings %>% count(movieid)
valid_movies <- filter(valid_movies, n >= 50)
ratings <- filter(ratings, movieid %in% valid_movies$movieid)
movies <- filter(movies, movieid %in% ratings$movieid)
ratings_pro_plot <- ggplot(ratings, aes(rating)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(rating)))  +
scale_y_continuous(labels=scales::percent) +
theme(legend.position="none") +
labs(
title="Figura 1: Ratings de filmes com mais de 50 ratings \"positivos\"", x="Rating", y="Nº of ratings")
rm(valid_movies)
#ratings_pro_plot
bm <- as(ratings,"binaryRatingMatrix")
bm
bm <- as(ratings,"binaryRatingMatrix")
es <- evaluationScheme(bm, method="split", train=0.8, k=1, given=2)
#set.seed(7)
#mask = sample.split(profiles$gender, SplitRatio=0.7)
#profiles_train = profiles[ mask,]
#profiles_test  = profiles[!mask,]
u_ratings_count <- ratings %>% count(userid)
u_ratings_count <- u_ratings_count %>% mutate(test = n>5 & n<=10)
users_train = filter(u_ratings_count, test==FALSE)$userid
users_test = filter(u_ratings_count, test==TRUE)$userid
#rm(mask)
valid_movies <- ratings %>% count(movieid)
valid_movies <- filter(valid_movies, n >= 50)
ratings <- filter(ratings, movieid %in% valid_movies$movieid)
movies <- filter(movies, movieid %in% ratings$movieid)
ratings_pro_plot <- ggplot(ratings, aes(rating)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(rating)))  +
scale_y_continuous(labels=scales::percent) +
theme(legend.position="none") +
labs(
title="Figura 1: Ratings de filmes com mais de 50 ratings \"positivos\"", x="Rating", y="Nº of ratings")
rm(valid_movies)
#ratings_pro_plot
bm <- as(ratings,"binaryRatingMatrix")
es <- evaluationScheme(bm, method="split", train=0.8, k=1, given=1)
pop_model <- Recommender(bm[ bm@data@itemsetInfo$itemsetID %in% users_train ,], "POPULAR")
getModel(pop_model)
#pop_model <- Recommender(bm[ bm@data@itemsetInfo$itemsetID %in% users_train ,], "POPULAR")
pop_model <- Recommender(getData(es, "train"), "POPULAR")
getModel(pop_model)
recs <- predict(pop_model, getData(es, "unknown"), type="topNList", n=2)
calcPredictionAccuracy(recs, getData(e, "unknown"), given=1)
calcPredictionAccuracy(recs, getData(es, "unknown"), given=1)
calc <- calcPredictionAccuracy(recs, getData(es, "unknown"), given=1)
getData(es, "unknown")
getData(es, "train")
calc <- calcPredictionAccuracy(recs, getData(es, "unknown"), given=1)
getData(es, "train")
bm <- as(ratings,"binaryRatingMatrix")
es <- evaluationScheme(bm, method="split", train=0.8, k=1, given=2)
#libraries
library(dplyr)
library(ggplot2)
library(gridExtra)
library(recommenderlab)
library(scales)
library(caTools)
movies <- read.csv('data/movies.csv')
profiles <- read.csv('data/profiles.csv')
ratings <- read.csv('data/ratings.csv')
ratings2 = ratings
#ratings <- ratings2
profiles$gender[profiles$gender == ""] <- "Unknown"
profiles$gender <- as.factor(profiles$gender)
summary(profiles)
profiles['agegroup'] <- profiles['age'] %>% mutate(age = as.integer(age/5)*5)
profiles$agegroup[is.na(profiles$agegroup) | profiles$agegroup > 70] <- 0
age_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 1: Utilizadores por idade", x="Sexo", y="% de Utilizadores")
gender_raw_plot = ggplot(profiles, aes(gender)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(gender))) +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 2: Utilizadores por género",x="Sexo", y="% de Utilizadores")
age_sex_raw_plot = ggplot(profiles, aes(agegroup)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(agegroup)))  +
scale_y_continuous(labels=scales::percent) +
labs(title="Figura 3: Idade dos utilizadores por género", x="Idade", y="% de Utilizadores") +
facet_grid(~gender)
# Create data
#ratings['rating'] = floor(ratings$rating)
ratings_raw_plot <- ggplot(ratings, aes(rating)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(rating)))  +
scale_y_continuous(labels=scales::percent) +
labs(
title="Figura 4: Classificações de filmes",
x="Classificação",
y="% de Classificações")
num_ratings_by_users <- ratings %>% count(userid)
num_users_by_num_ratings <- num_ratings_by_users %>% count(n)
valid_users <- filter(num_ratings_by_users,n<200 & n>5)$userid
ratings <- filter(ratings, userid %in% valid_users)
#ratings <- filter(ratings, rating >= 3)
rm(valid_users,num_ratings_by_users,num_users_by_num_ratings)
users_prof <- unique(profiles$userid)
c_users_prof <- length(users_prof)
# Number of total users
print(c_users_prof)
users_rat <- unique(ratings$userid)
c_users_rat <- length(users_rat)
# Number of users that have rated a movie
print(c_users_rat)
# Number of useless users
print(c_users_prof - c_users_rat)
profiles <- filter(profiles, userid %in% users_rat)
rm(users_prof,c_users_prof,users_rat,c_users_rat)
ratings <- filter(ratings, userid %in% profiles$userid)
#set.seed(7)
#mask = sample.split(profiles$gender, SplitRatio=0.7)
#profiles_train = profiles[ mask,]
#profiles_test  = profiles[!mask,]
u_ratings_count <- ratings %>% count(userid)
u_ratings_count <- u_ratings_count %>% mutate(test = n>5 & n<=10)
users_train = filter(u_ratings_count, test==FALSE)$userid
users_test = filter(u_ratings_count, test==TRUE)$userid
#rm(mask)
bm <- as(ratings,"binaryRatingMatrix")
es <- evaluationScheme(bm, method="split", train=0.8, k=1, given=2)
#pop_model <- Recommender(bm[ bm@data@itemsetInfo$itemsetID %in% users_train ,], "POPULAR")
pop_model <- Recommender(getData(es, "train"), "POPULAR")
getModel(pop_model)
recs <- predict(pop_model, getData(es, "unknown"), type="topNList", n=2)
calcPredictionAccuracy(recs, getData(es, "unknown"), given=1)
bm <- as(ratings,"binaryRatingMatrix")
es <- evaluationScheme(bm, method="split", train=0.95, k=1, given=2)
#pop_model <- Recommender(bm[ bm@data@itemsetInfo$itemsetID %in% users_train ,], "POPULAR")
pop_model <- Recommender(getData(es, "train"), "POPULAR")
getModel(pop_model)
recs <- predict(pop_model, getData(es, "unknown"), type="topNList", n=2)
calcPredictionAccuracy(recs, getData(es, "unknown"), given=1)
getList(recs)
